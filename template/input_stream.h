#if !defined input_stream_h
#define input_stream_h

#include "protocol.h"

/**
 * 
 * @author Laouen Louan Mayal Belloli
 * @date 14 May 2017
 * 
 * @class input_stream input_stream.h
 * 
 * @brief Template meta model of an input_stream model. Once instanciated, this
 * model is initialized with a file_path pointing to the file where is the input 
 * to generate and insert to the model. 
 * This model parses the file lines using the [parser](@ref Parser) class and generates a timed 
 * input that will be send through the output port number zero. The input stream 
 * uses the next_timed_input method from the [parser](@ref Parser) class in order to read the input 
 * with it asociated time as the first value of each line (see the [parser](@ref Parser) documentation).
 * 
 * @details This model must be inherited by a new class with the template DATA
 * parameter specified with the input type to generate.
 * 
 * The new class must follow the PowerDEVS specifications and a .cpp file must 
 * exist even if it is an empty file in order to correctly compile the model 
 * from the PowerDEVS IDE.
 * 
 * The next rules must be followed:
 * 1. This file must be included in the file where the new class is declared.
 * 2. The new class name must be all lower case.
 * 3. The new class must have in the first line the next comment: 
 *        //CPP:networkDEVS/new_class_name.cpp.
 * 4. The file networkDEVS/new_class_name.cpp must exist as an empty file.
 * 5. The constructor of the new class must be specified in the public section as shown here: 
 *        new_class_name(const char *n): input_stream(n) {};
 *        
 * The parameters to specifie in the PowerDEVS IDE (right click in the atomic
 * model -> edit -> parameters) are the nexts:
 * 
      name    |      type     |                    description
:-----------: | :-----------: | :--------------------------------------------------:
 module name  |    String     | a name used to tag the logs generated by this model
 file path    |    String     | the file path from where to read the input
 * 
 * @tparam DATA The data type of the input to generate. Must implement the >> operator.
 */

template<typename INPUT>
class input_stream: public Simulator { 

  Logger logger;
  Parser<INPUT> _parser;
  double _next_time;
  message::queue<INPUT> _sent_inputs;
  INPUT _next_input;

public:
  input_stream(const char *n): Simulator(n) {};
  
  void init(double t, ...) {
    // PowerDEVS parameters
    va_list parameters;
    va_start(parameters,t);

    // Set logger module name
    std::string module_name = va_arg(parameters,char*);
    logger.setModuleName("Input stream " + module_name);

    const char* file_path = va_arg(parameters,char*);

    _parser.open_file(file_path);
    dint(0.0);
  }

  double ta(double t) {
    return _next_time;
  }

  void dint(double t) {
    try {
      std::pair<double,INPUT> parsed_line = _parser.next_timed_input();
      _next_time = parsed_line.first - t;
      _next_input = parsed_line.second;

      if (_next_time < 0.0) {
        throw std::exception();
      }
    } catch(std::exception& e) {
      _next_time = std::numeric_limits<double>::max();
      _next_input = INPUT();
    }
  }

  void dext(Event x, double t) {
    throw std::exception();
  }

  Event lambda(double t) {
    return _sent_inputs.send(_next_input,0);
  }

  void exit() {}
};

#endif