#if !defined multiplexer_h
#define multiplexer_h

#include <limits>

#include "simulator.h"
#include "event.h"
#include "stdarg.h"

#include "../libs/message_queue.h"

#include "../structures/abstract_types.h"
#include "../structures/link.h"

/**
 * 
 * @author Laouen Louan Mayal Belloli
 * @date 14 May 2017
 * 
 * @class multiplexer multiplexer.h
 * 
 * @brief Template meta model of a multiplexer that receives a 
 * MSG in one of the inputs port and returns a message::multiplexer<MSG> 
 * that encapsulate the MSG seting the port where it has arrives as the interface 
 * field of the multiplexed instance. The multiplexed instance is send through 
 * the output port number zero.
 * 
 * @details This model must be inherited by a new class with the template MSG
 * parameter specified with the message type to multiplex.
 * 
 * The new class must follow the PowerDEVS specifications and a .cpp file must 
 * exist even if it is an empty file in order to correctly compile the model 
 * from the PowerDEVS IDE.
 * 
 * The next rules must be followed:
 * 1. This file must be included in the file where the new class is declared.
 * 2. The new class name must be all lower case.
 * 3. The new class must have in the first line the next comment: 
 *        //CPP:networkDEVS/new_class_name.cpp.
 * 4. The file networkDEVS/new_class_name.cpp must exist as an empty file.
 * 5. The constructor of the new class must be specified in the public section as shown here: 
 *        new_class_name(const char *n): multiplexer(n) {};
 * 
 * The parameters to specifie in the PowerDEVS IDE (right click in the atomic
 * model -> edit -> parameters) are the nexts:
 *
      name    |      type     |                    description
:-----------: | :-----------: | :--------------------------------------------------:
 module name  |    String     | a name used to tag the logs generated by this model 
 * 
 * @tparam MSG The data type of the expected message that must encapsulate in a 
 * message::Multiplexed message and send through the output port zero.
 */

template<typename MSG>
class multiplexer: public Simulator {
  Logger logger;

  message::queue<message::Multiplexed<MSG>> _output_queue;
  Event _output;

  double infinity = std::numeric_limits<double>::max();

public:
  multiplexer(const char *n): Simulator(n) {}

  void init(double t, ...) {
    // PowerDEVS parameters
    va_list parameters;
    va_start(parameters,t);

    // Set logger module name
    std::string module_name = va_arg(parameters,char*);
    logger.setModuleName("Multiplexer " + module_name);

    logger.info("Multiplexer initialized.");

    _output = Event(0,1);
  }

  double ta(double t) {
    return (_output.port > 0) ? infinity : 0;
  }

  void dint(double t) {
    _output = Event(0,1);
  }

  void dext(Event x, double t) {

    message::Multiplexed<MSG> m;
    m.message = *(MSG*)x.value;
    m.interface = x.port;
    _output = _output_queue.send(m, 0);
  }

  Event lambda(double t) {
    return _output;
  }

  void exit() {}
};

#endif